/*************************************************************************
 *
 *  ti_coince_list.c - Library of routines for readout and buffering of
 *                     events using a JLAB Trigger Interface V3 (TI) with
 *                     a Linux VME controller in CODA 3.0.
 *
 *                     This is for a test list for TI in Master Mode
 *                     Examing concidence and basic trigger detection
 *
 *                     Basing off of ti_master_list.c
 */

/* Event Buffer definitions */
#define MAX_EVENT_POOL 10
#define MAX_EVENT_LENGTH 1024*64 /* size in bytes */

#define TI_MASTER
/* EXTernal trigger source (e.g. front panel ECL input), POLL for available data */
#define TI_READOUT TI_READOUT_EXT_POLL
/* TI VME address, or 0 for Auto Initialize (search for TI by slot) */
#define TI_ADDR  0

/* Measured longest fiber length in system */
#define FIBER_LATENCY_OFFSET 0x4A

#include "dmaBankTools.h"   /* Macros for handling CODA banks */
#include "tiprimary_list.c" /* Source required for CODA readout lists using the TI */
#include "sdLib.h"

#include "test_trigger_table.h" /* User created Trigger Tables */
/* Define initial blocklevel and buffering level */
#define BLOCKLEVEL 1
#define BUFFERLEVEL 10

/****************************************
 *  DOWNLOAD
 ****************************************/
void
rocDownload()
{
	int stat;
	/* Setup Address and data modes for DMA transfers
	 *
	 *  vmeDmaConfig(addrType, dataType, sstMode);
	 *
	 *  addrType = 0 (A16)    1 (A24)    2 (A32)
	 *  dataType = 0 (D16)    1 (D32)    2 (BLK32) 3 (MBLK) 4 (2eVME) 5 (2eSST)
	 *  sstMode  = 0 (SST160) 1 (SST267) 2 (SST320)
	 */
	vmeDMAConfig(2,5,1);	 

	/* Define Block level */
	blockLevel = BLOCKLEVEL;


	/*****************
	 *   TI SETUP
	 *****************/

	/*
	 * Set Trigger source
	 *    For the TI-Master, valid sources:
	 *      TI_TRIGGER_FPTRG     2  Front Panel "TRG" Input
	 *      TI_TRIGGER_TSINPUTS  3  Front Panel "TS" Inputs
	 *      TI_TRIGGER_TSREV2    4  Ribbon cable from Legacy TS module
	 *      TI_TRIGGER_PULSER    5  TI Internal Pulser (Fixed rate and/or random)
	 */
	tiSetTriggerSource(TI_TRIGGER_TSINPUTS); /* TS Inputs enables */
	
	/* Enable set specific TS input bits (1-6) */
	tiEnableTSInput ( TI_TSINPUT_1 | TI_TSINPUT_6 );
	tiTriggerTableConfig( tiTable_coinc_test );
	tiSetTriggerHoldoff(1,10,0);
	
	/* Set initial number of events per block */
	tiSetBlockLevel(blockLevel);
	
	/* Set Trigger Buffer Level */
	tiSetBlockBufferLevel(BUFFERLEVEL);
	
	/* Init the SD library so we can get status info */
	stat = sdInit(0);
	if( stat == 0 )	
	{
		sdSetActiveVmeSlots(0);
		sdStatus(0);	
	}
	tiStatus(0);

	printf("rocDownload: ti_coince_list.c Download Executed");
}



/****************************************
 *  PRESTART
 ****************************************/
void
rocPrestart()
{
	/* Set number of events per block (broadcasted to all connected TI Slaves) */
	tiSetBlockLevel(blockLevel);
	printf("rocPrestart: Block level set to %d\n",blockLevel);

	tiStatus(0);

	/* Example: user bank of banks added to prestart event */
	UEOPEN(500, BT_BANK,0);
	
	/* Example: bank of data in user Bank 500 (added above) */
	CBOPEN(1,BT_UI4,0);
	*rol->dabufp++ = 0x11112222;
	*rol->dabufp++ = 0x55556666;
	*rol->dabufp++ = 0xaabbccdd;

	UECLOSE;

	printf("rocPrestart: ti_coince_list.c Prestart Executed");
}


/****************************************
 *  GO
 ****************************************/
void
rocGo()
{
	/* print out the Run Number and Run Type (config id) */
	printf("rocGo: Activating Run Number %d, Config id = %d\n", rol->runNumber, rol->runType);
	
	/* get the current Block Level */
	blockLevel = tiGetCurrentBlockLevel();
	printf("rocGo: Block level set to %d\n", blockLevel);

	/* Enable/Set Block level on modules, if needed, here */

	/* Example: how to start internal pulser trigger */
#ifdef INTRANDOMPULSER
	/* Enable Random at rate (500khz/(2^7) = ~3.9kHx */
	tiSetRandomTrigger(1,0x7);
#elif defined (INTFIXEDPULSER)
	/* Enable fixed rate with period (ns) 120+30*700*(1024^0) = 21.1us (~47.4 kHz)
	   - Generated 1000 times */
	tiSoftTrig(1,1000,700,0);
#endif

}

/****************************************
 *  TRIGGER
 ****************************************/
void
rocTrigger(int arg)
{
	int dCnt;

	/* Set TI output 1 high for diagnostics */
	/* Set (or unsets) the high level for the output ports on the front panel */
	tiSetOutputPort(1,0,0,0);

	/* Readout the trigger block from the TI 
	 * Trigger Block MUST be readout first */
	dCnt = tireadTriggerBlock(dma_dabufp);
	
	if(dCnt <=0)
	{
		printf("No TI trigger data or error. dCnt = %d\n",dCnt);
	}
	else
	{
		/* TI data is already in a bank structure. Bump the pointer */
		dma_dabufp += dCnt;
	}

	/* Example: How to open a bank (name=5, type=ui40 and add data words by hand */
	BANKOPEN(5,BT_UI4,blockLevel);
	*dma_dabufp++ = tiGetIntCount();
	*dma_dabufp++ = 0xdead;
	*dma_dabufp++ = 0xcebaf111;
	*dma_dabufp++ = 0xcebaf222;
	BANKCLOSE;
	
	/* Set TI output 0 low */
	tiSetOutputPort(0,0,0,0);
}

void
rocCleanup()
{
	printf("%s: Reset all modules\n", __FUNCTION__);
}
